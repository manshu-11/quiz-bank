{"version":3,"file":"static/js/96.56c44acb.chunk.js","mappings":"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","sources":["../node_modules/firebase/app/index.ts","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/operation/ListenComplete.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Event.ts","../node_modules/@firebase/database/src/core/view/EventRegistration.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a JavaScript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _isFirebaseServerApp } from '@firebase/app'; // eslint-disable-line import/no-extraneous-dependencies\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  private serverAppAppCheckToken?: string;\n  private appName: string;\n  constructor(\n    app: FirebaseApp,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appName = app.name;\n    if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n      this.serverAppAppCheckToken = app.settings.appCheckToken;\n    }\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (this.serverAppAppCheckToken) {\n      if (forceRefresh) {\n        throw new Error(\n          'Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.'\n        );\n      }\n      return Promise.resolve({ token: this.serverAppAppCheckToken });\n    }\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, EmulatorMockTokenOptions } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\nexport interface RepoInfoEmulatorOptions {\n  mockUserToken?: string | EmulatorMockTokenOptions;\n}\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false,\n    public readonly emulatorOptions: RepoInfoEmulatorOptions | null = null\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are received from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = Math.max(\n        0,\n        new Date().getTime() - this.lastConnectionAttemptTime_\n      );\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap will be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexicographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\nexport interface IteratedDataSnapshot extends DataSnapshot {\n  key: string; // key of the location of this snapshot.\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {\n  key: string;\n  parent: ReferenceImpl;\n}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thenablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thenablePushRef.then = promise.then.bind(promise);\n  thenablePushRef.catch = promise.then.bind(promise, undefined);\n  return thenablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type = 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type = 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type = 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type = 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type = 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type = 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type = 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type = 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type = 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type = 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type = 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  deepEqual,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort,\n  isCloudWorkstation,\n  pingServer,\n  updateEmulatorBanner\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo, RepoInfoEmulatorOptions } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  hostAndPort: string,\n  emulatorOptions: RepoInfoEmulatorOptions,\n  tokenProvider?: AuthTokenProvider\n): void {\n  const portIndex = hostAndPort.lastIndexOf(':');\n  const host = hostAndPort.substring(0, portIndex);\n  const useSsl = isCloudWorkstation(host);\n  repo.repoInfo_ = new RepoInfo(\n    hostAndPort,\n    /* secure= */ useSsl,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true,\n    emulatorOptions\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n\n  const hostAndPort = `${host}:${port}`;\n  const repo = db._repoInternal;\n  if (db._instanceStarted) {\n    // If the instance has already been started, then silenty fail if this function is called again\n    // with the same parameters. If the parameters differ then assert.\n    if (\n      hostAndPort === db._repoInternal.repoInfo_.host &&\n      deepEqual(options, repo.repoInfo_.emulatorOptions)\n    ) {\n      return;\n    }\n    fatal(\n      'connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.'\n    );\n  }\n\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Workaround to get cookies in Firebase Studio\n  if (isCloudWorkstation(host)) {\n    void pingServer(host);\n    updateEmulatorBanner('Database', true);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, hostAndPort, options, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["registerVersion","SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","this","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","arguments","length","arg","undefined","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","_len","varArgs","_key2","logWrapper","prefix","_len2","_key3","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","bias","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","app","appCheckProvider","appName","_isFirebaseServerApp","settings","appCheckToken","serverAppAppCheckToken","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","token","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","appName_","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","emulatorOptions","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","deepCopy","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","_this","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","_len3","args","_key4","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","_len4","_key5","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","_len5","_key6","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","getInstance","super","online_","isMobileCordova","currentlyOnline","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","Deferred","outstandingGet","request","p","_path","q","_queryObject","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","Default","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsStartAt","queryParams","newParams","queryParamsEndAt","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listens_","listenId","thisListen","queryStringParameters","restRequest_","_ref","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","changeTree","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoInterrupt","_len6","_key7","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","encodeURIComponent","pathToUrlEncodedString","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","thenablePushRef","pushRef","wrapCallback","callbackContext","container","ValueEventRegistration","cached","err","repoGetValue","QueryConstraint","QueryEndAtConstraint","_value","_apply","QueryStartAtConstraint","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryEqualToValueConstraint","equalTo","queryImpl","_len7","queryConstraints","_key8","constraint","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","repoManagerDeleteRepo","apiName","getDatabase","getApp","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","hostAndPort","deepEqual","tokenProvider","mockUserToken","createMockUserToken","isCloudWorkstation","pingServer","updateEmulatorBanner","portIndex","lastIndexOf","useSsl","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","prototype","simpleListen","echo","onEcho","variant","SDK_VERSION$1","_registerComponent","Component","_ref2","instanceIdentifier","getProvider","setMultipleInstances"],"sourceRoot":""}